local wk = require("which-key")

wk.register({
	v = {
		name = "Vim",
		q = { '<cmd>lua require("telescope.builtin").quickfix()<CR>', "Quickfix List" },
		l = { '<cmd>lua require("telescope.builtin").loclist()<CR>', "Location List" },
		j = { '<cmd>lua require("telescope.builtin").jumplist()<CR>', "Jump List" },
		c = { '<cmd>lua require("telescope.builtin").commands()<CR>', "Commands" },
		h = { '<cmd>lua require("telescope.builtin").command_history()<CR>', "Command History" },
		s = { '<cmd>lua require("telescope.builtin").search_history()<CR>', "Search History" },
		m = { '<cmd>lua require("telescope.builtin").man_pages()<CR>', "Man Pages" },
		k = { '<cmd>lua require("telescope.builtin").marks()<CR>', "Marks" },
		o = { '<cmd>lua require("telescope.builtin").colorscheme()<CR>', "Colorscheme" },
		r = { '<cmd>lua require("telescope.builtin").registers()<CR>', "Registers" },
		a = { '<cmd>lua require("telescope.builtin").autocommands()<CR>', "Autocommands" },
		p = { '<cmd>lua require("telescope.builtin").vim_options()<CR>', "Vim Options" },
		e = { '<cmd>lua require("telescope.builtin").spell_suggest()<CR>', "Spell Suggestions" },
		y = { '<cmd>lua require("telescope.builtin").keymaps()<CR>', "Normal Mode Keymaps" },
	},
	s = {
		name = "Search",
		b = { '<cmd>lua require("telescope.builtin").buffers()<CR>', "Buffers" },
		f = { '<cmd>lua require("telescope.builtin").find_files()<CR>', "Files" },
		w = { '<cmd>lua require("telescope.builtin").file_browser()<CR>', "File Browser" },
		o = { '<cmd>lua require("telescope.builtin").oldfiles()<CR>', "Prev Open Files" },
		g = { '<cmd>lua require("telescope.builtin").grep_string()<CR>', "Grep String" },
		l = { '<cmd>lua require("telescope.builtin").live_grep()<CR>', "Live Grep" },
		r = { '<cmd>lua require("telescope").extensions.live_grep_raw.live_grep_raw()<CR>', "Live Grep Raw" },
	},
	g = {
		name = "Git",
		f = { '<cmd>lua require("telescope.builtin").git_files()<CR>', "Files" },
		s = { '<cmd>lua require("telescope.builtin").git_status()<CR>', "Status" },
		c = { '<cmd>lua require("telescope.builtin").git_commits()<CR>', "Commit Log" },
		l = { '<cmd>lua require("telescope.builtin").git_bcommits()<CR>', "Commit Log Current Buffer" },
		b = { '<cmd>lua require("telescope.builtin").git_branches()<CR>', "Branches" },
		t = { '<cmd>lua require("telescope.builtin").git_stash()<CR>', "Stash" },
	},
	l = {
		name = "LSP",
		r = { '<cmd>lua require("telescope.builtin").lsp_references()<CR>', "References" },
		t = { '<cmd>lua require("telescope.builtin").lsp_type_definitions()<CR>', "Type Definitions" },
		i = { '<cmd>lua require("telescope.builtin").lsp_implementations()<CR>', "Implementations" },
		s = { '<cmd>lua require("telescope.builtin").lsp_document_symbols()<CR>', "Document Symbols" },
		w = { '<cmd>lua require("telescope.builtin").lsp_workspace_symbols()<CR>', "Workspace Symbols" },
		v = {
			'<cmd>lua require("telescope.builtin").lsp_dynamic_workspace_symbols()<CR>',
			"Dynamic Workspace Symbols",
		},
		a = { '<cmd>lua require("telescope.builtin").lsp_code_actions()<CR>', "Code Actions" },
		n = { '<cmd>lua require("telescope.builtin").lsp_range_code_actions()<CR>', "Range Code Actions" },
		g = { '<cmd>lua require("telescope.builtin").lsp_document_diagnostics()<CR>', "Document Diagnostics" },
		o = { '<cmd>lua require("telescope.builtin").lsp_workspace_diagnostics()<CR>', "Workspace Diagnostics" },
		e = { '<cmd>lua require("telescope.builtin").treesitter()<CR>', "Treesitter" },
		l = { "<cmd>lua vim.lsp.codelens.display()<CR>", "Code Lens" },
	},
	t = {
		name = "Telescope",
		s = { '<cmd>lua require("telescope.builtin").planets()<CR>', "Use Telescope..." },
		c = { '<cmd>lua require("telescope.builtin").builtin()<CR>', "Builtin Pickers" },
		h = { '<cmd>lua require("telescope.builtin").reloader()<CR>', "Reload Lua Modules" },
		y = { '<cmd>lua require("telescope.builtin").symbols()<CR>', "List Symbols" },
		m = { '<cmd>lua require("telescope.builtin").resume()<CR>', "Resume Last Picker" },
		r = { '<cmd>lua require("telescope.builtin").pickers()<CR>', "Previous Pickers" },
	},
	d = {
		name = "Debug Adapter",
		c = { '<cmd>lua require("telescope").extensions.dap.commands()<CR>', "Commands" },
		f = { '<cmd>lua require("telescope").extensions.dap.configurations()<CR>', "Configurations" },
		b = { '<cmd>lua require("telescope").extensions.dap.list_breakpoints()<CR>', "Breakpoints" },
		v = { '<cmd>lua require("telescope").extensions.dap.variables()<CR>', "Variables" },
		r = { '<cmd>lua require("telescope").extensions.dap.frames()<CR>', "Frames" },
	},
	r = {
		name = "Rust",
		r = { ":RustRunnables<CR>", "Runnables" },
		d = { ":RustDebuggables<CR>", "Debuggables" },
		e = { ":RustExpandMacro<CR>", "Expand Macro" },
		c = { ":RustOpenCargo<CR>", "Open Cargo.toml" },
		-- g = { ':RustViewCrateGraph<CR>', 'View Crate Graph' },
		m = { ":RustParentModule<CR>", "Parent Module" },
		j = { ":RustJoinLines<CR>", "Join Lines" },
		a = { ":RustHoverActions<CR>", "Hover Actions" },
		h = { ":RustHoverRange<CR>", "Range Hover Actions" },
		b = { ":RustMoveItemDown<CR>", "Move Item Down" },
		u = { ":RustMoveItemUp<CR>", "Move Item Up" },
		s = { ":RustStartStandaloneServerForBuffer<CR>", "New Server for Buffer" },
	},
}, {
	prefix = "<leader>",
	noremap = true,
	silent = true,
	mode = "n",
})
