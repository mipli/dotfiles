# {{{ Zplugin
### Added by Zplugin's installer
source '/home/michael/.zplugin/bin/zplugin.zsh'
autoload -Uz _zplugin
(( ${+_comps} )) && _comps[zplugin]=_zplugin
### End of Zplugin's installer chunk

# Enforce VI mode
bindkey -v
export KEYTIMEOUT=1

export NVM_LAZY_LOAD=true
export NVM_AUTO_USE=true
zplugin light lukechilds/zsh-nvm

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# zplugin ice pick"async.zsh" src"pure.zsh"; zplugin light sindresorhus/pure

# source ~/.dotfiles/zsh/pure/async.zsh
# source ~/.dotfiles/zsh/pure/pure.zsh
#


zplugin light urbainvaes/fzf-marks

zplugin light zsh-users/zsh-autosuggestions

# }}}
#
export EDITOR=/usr/bin/nvim

setopt RM_STAR_WAIT
export SAVEHIST=32768;
export HISTSIZE=32768;
export HISTFILESIZE=$HISTSIZE;
export HISTFILE=/home/michael/.zsh_history;
export HISTCONTROL=ignoredups;
export HISTORY_IGNORE="(ls|cd|pwd|exit|date)";

source ~/.dotfiles/zsh/zsh-syntax-highlighting
source ~/.dotfiles/zsh/aliases.zsh
source ~/.dotfiles/zsh/completion.zsh

source /usr/share/fzf/key-bindings.zsh
source /usr/share/fzf/completion.zsh


# {{{ Python
# export PYENV_ROOT="$HOME/.pyenv"
# export PATH="$PYENV_ROOT/bin:$HOME/.local/bin:$PATH"
# eval "$(pyenv init -)"

# export VIRTUALENVWRAPPER_SCRIPT=/home/michael/.pyenv/versions/3.6.0/bin/virtualenvwrapper.sh
# [ -s "/home/michael/.pyenv/versions/3.6.0/bin/virtualenvwrapper_lazy.sh" ] && source "/home/michael/.pyenv/versions/3.6.0/bin/virtualenvwrapper_lazy.sh"
# }}}

# {{{ Exercism
if [ -f ~/.config/exercism/exercism_completion.zsh ]; then
  source ~/.config/exercism/exercism_completion.zsh
fi
# }}}
#

# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[ShiftTab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"      beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"       end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"    overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}" backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"    delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"        up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"      down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"      backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"     forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"    beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"  end-of-buffer-or-history
[[ -n "${key[ShiftTab]}"  ]] && bindkey -- "${key[ShiftTab]}"  reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start {
		echoti smkx
	}
	function zle_application_mode_stop {
		echoti rmkx
	}
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

## MUST BE AT END
zplugin light zsh-users/zsh-syntax-highlighting
eval "$(starship init zsh)"

eval "$(zoxide init zsh)"

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/bin/terraform terraform

export PATH="$HOME/.tfenv/bin:$PATH"
